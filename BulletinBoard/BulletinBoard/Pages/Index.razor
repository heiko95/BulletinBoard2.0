@page "/"
@using BulletinBoard.Services.Contracts
@using hgSoftware.DomainServices.Models
@using hgSoftware.DomainServices.SettingModels
@inject IBoardElementService BoardElementService

<PageTitle>BulletinBoard</PageTitle>

@if (Elements.Count > 0 && DataIsLoaded)
{
    <BSCarousel style="height:100vh">   
       
        @{  var count = 0; 

            foreach(var element in Elements)
            {
                var direction = (Direction)(count%2);
                switch(element)
                {
                    case WelcomeElement:
                    <BSCarouselItem Interval="@WelcomeInterval">
                        <WelcomeCard WelcomeElement=@(element as WelcomeElement) Direction=@(direction.ToString())></WelcomeCard>
                    </BSCarouselItem>
                    break;
                    case ImageElement:    
                    <BSCarouselItem Interval="@ImageInterval">
                        <ImageCard ImageElement=@(element as ImageElement) Direction=@(direction.ToString())></ImageCard>
                    </BSCarouselItem>
                    break;
                    case PlannerElement:        
                    <BSCarouselItem Interval="@PlannerInterval">
                        <PlannerCard PlannerElement=@(element as PlannerElement) Direction=@(direction.ToString())></PlannerCard>   
                    </BSCarouselItem>
                    break;
                    case BibleTextElement:
                    <BSCarouselItem Interval="@BibleTextInterval">
                        <BibleVerseCard BibleTextElement=@(element as BibleTextElement) Direction=@(direction.ToString())></BibleVerseCard>
                        </BSCarouselItem>
                     break;
                }
                count++;
            } 
        }
    </BSCarousel>
}
else 
{    
    <LoadingScreen></LoadingScreen>
}


@code{


    enum Direction
    {
        left,
        right
    };

    IList<IElement> Elements = new List<IElement>();
    int ImageInterval, BibleTextInterval, PlannerInterval, WelcomeInterval = 0;

    bool DataIsLoaded = false;

    protected override async Task OnParametersSetAsync()
    {
        await BoardElementService.InitElements();
        var slideSettings = BoardElementService.GetSlideSettings();       

        Elements = await BoardElementService.GetCurrentElements();

        if (Elements.Count > 1)
        {
            ImageInterval = slideSettings.ImageInterval;
            BibleTextInterval = slideSettings.BibleTextInterval;
            PlannerInterval = slideSettings.PlannerInterval;
            WelcomeInterval = slideSettings.WelcomeInterval;
        }

        //DataIsLoaded = true;

    }
}








